{
  "name": "cluster-service",
  "version": "1.0.5",
  "author": {
    "name": "Aaron Silvas",
    "email": "asilvas@godaddy.com"
  },
  "description": "Turns your single process code into a fault-resilient multi-process service with built-in REST & CLI support",
  "main": "./cluster-service.js",
  "scripts": {
    "start": "node scripts/start.js",
    "lint": "npm run-script lint-src && npm run-script lint-test",
    "lint-src": "jshint bin lib cluster-service.js",
    "lint-test": "jshint --config .test-jshintrc test",
    "cover": "istanbul cover ./node_modules/mocha/bin/_mocha -- --ui bdd -R spec -t 5000 -d",
    "test-devel": "./node_modules/.bin/mocha bdd -R spec -t 5000 test/*.js test/workers/*.js",
    "test": "npm run-script lint && npm run-script cover"
  },
  "dependencies": {
    "async": "~0.8.0",
    "optimist": ">=0.6.0",
    "colors": ">=0.6.2",
    "extend": ">=1.1.x"
  },
  "devDependencies": {
    "mocha": "~1.12.0",
    "request": ">=2.21.0",
    "istanbul": "~0.1.43",
    "sinon": "1.7.3",
    "jshint": "2.3.x"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/godaddy/node-cluster-service.git"
  },
  "license": "MIT",
  "homepage": "https://github.com/godaddy/node-cluster-service",
  "bugs": {
    "url": "https://github.com/godaddy/node-cluster-service/issues"
  },
  "bin": {
    "cluster-service": "./bin/cservice",
    "cservice": "./bin/cservice",
    "cserviced": "./bin/cserviced"
  },
  "keywords": [
    "cluster",
    "service",
    "ha",
    "high availability",
    "cli",
    "remote access",
    "multi process",
    "master",
    "child",
    "process",
    "monitor",
    "monitoring",
    "continous integration",
    "healthcheck",
    "heartbeat",
    "health check",
    "heart beat",
    "REST",
    "resilient"
  ],
  "readme": "# cluster-service\n\n[![Build Status](https://travis-ci.org/godaddy/node-cluster-service.png)](https://travis-ci.org/godaddy/node-cluster-service) [![NPM version](https://badge.fury.io/js/cluster-service.png)](http://badge.fury.io/js/cluster-service) [![Dependency Status](https://gemnasium.com/godaddy/node-cluster-service.png)](https://gemnasium.com/godaddy/node-cluster-service) [![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/godaddy/node-cluster-service/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\n\n[![NPM](https://nodei.co/npm/cluster-service.png?downloads=true&stars=true)](https://www.npmjs.org/package/cluster-service)\n\n## Install\n\n\tnpm install cluster-service\n\nhttps://npmjs.org/package/cluster-service\n\n\n\n## About\n\n\tTurn your single process code into a fault-resilient, multi-process service with\n\tbuilt-in REST & CLI support. Restart or hot upgrade your web servers with zero\n\tdowntime or impact to clients.\n\nPresentation:\n\nhttp://x.co/bpnode\n\nVideo:\n\nhttp://x.co/bpnodevid\n \n \n## Getting Started\n\nYour existing application, be it console app or service of some kind:\n\n\t// server.js\n\tconsole.log(\"Hello World\");\n\nLeveraging ```cluster-service``` without adding a line of code:\n\n\tnpm install -g cluster-service\n\tcservice \"server.js\" --accessKey \"lksjdf982734\"\n\t// cserviced \"server.js\" --accessKey \"lksjdf982734\" // daemon\n\nThis can be done without a global install as well, by updating your ```package.json```:\n\n\t\"scripts\": {\n\t\t\"start\": \"cservice server.js --accessKey lksjdf982734\"\n\t},\n\t\"dependencies\": {\n\t\t\"cluster-service\": \">=0.5.0\"\n\t}\n\nNow we can leverage ```npm``` to find our local install of ```cluster-service```:\n\n\tnpm start\n\nOr, if you prefer to control ```cluster-service``` within your code, we've got you covered:\n\n\t// server.js\n\trequire(\"cluster-service\").start({ workers: \"./worker.js\", accessKey: \"lksjdf982734\" });\n\n\t// worker.js\n\tconsole.log(\"Hello World\"); // notice we moved our original app logic to the worker\n\n\n\n## Talk to it\n\nNow that your service is resilient to worker failure, and utilizing all cores of your machine, lets talk to it.\nWith your service running, type into the command-line:\n\n\trestart all\n\nor for a full list of commands...\n\n\thelp\n\nor for help on a specific command:\n\n\thelp {command}\n\t\nWe can also issue commands from a seperate process, or even a remote machine (assuming proper access):\n\n\tnpm install -g cluster-service\n\tcservice \"restart all\" --accessKey \"my_access_key\"\n\nYou can even pipe raw JSON for processing:\n\n\tcservice \"restart all\" --accessKey \"my_access_key\" --json\n\nCheck out ***Cluster Commands*** for more.\n\n\n\n## Start Options\n\nWhen initializing your service, you have a number of options available:\n\n  cservice \"server.js\" --accessKey \"123\"\n\nOr via JSON config:\n\n\tcservice \"config.json\"\n\nOr within your node app:\n\n\t// server.js\n\t// inline options\n\trequire(\"cluster-service\").start({ workers: \"worker.js\", accessKey: \"123\" });\n\t// or via config\n\trequire(\"cluster-service\").start({ config: \"config.json\" });\n\n### Options:\n\n* `workers` - Path of worker to start. A string indicates a single worker,\n  forked based on value of ```workerCount```. An object indicates one or more worker objects:\n  ```{ \"worker1\": { worker: \"worker1.js\", cwd: process.cwd(), count: 2, restart: true } }```.\n  This option is automatically set if run via command-line ```cservice \"worker.js\"``` if\n  the ```.js``` extension is detected.\n* `accessKey` - A secret key that must be specified if you wish to invoke commands from outside\n  your process. Allows CLI & REST interfaces.\n* `config` - A filename to the configuration to load. Useful to keep options from having to be inline.\n  This option is automatically set if run via command-line ```cservice \"config.json\"``` if\n  the ```.json``` extension is detected.\n* `host` (default: \"localhost\") - Host to bind to for REST interface. (Will only bind if `accessKey`\n  is provided)\n* `port` (default: 11987) - Port to bind to. If you leverage more than one cluster-service on a\n  machine, you'll want to assign unique ports. (Will only bind if accessKey is provided)\n* `workerCount` (default: os.cpus().length) - Gives you control over the number of processes to\n  run the same worker concurrently. Recommended to be 2 or more to improve availability. But some\n  workers do not impact availability, such as task queues, and can be run as a single instance.\n* `cli` (default: true) - Enable the command line interface. Can be disabled for background\n  services, or test cases. Running `cserviced` will automatically disable the CLI.\n* `ssl` - If provided, will bind using HTTPS by passing this object as the\n  [TLS options](http://nodejs.org/api/tls.html#tls_tls_createserver_options_secureconnectionlistener).\n* `run` - Ability to run a command, output result, and exit. This option is automatically\n  set if run via command-line ```cservice \"restart all\"``` and no extension is detected.\n* `json` (default: false) - If specified in conjunction with ```run```,\n  will *only* output the result in JSON for\n  consumption from other tasks/services. No other data will be output.\n* `silent` (default: false) - If true, forked workers will not send their output to parent's stdio.\n* `allowHttpGet` (default: false) - For development purposes, can be enabled for testing, but is\n  not recommended otherwise.\n* `restartOnMemUsage` (default: disabled) - If a worker process exceeds the specified memory threshold\n  (in bytes), the process will be restarted gracefully. Only one worker will be restarted at a time.\n* `restartOnUpTime` (default: disabled) - If a worker process exceeds the specified uptime threshold\n  (in seconds), the process will be restarted gracefully. Only one worker will be restarted at a time.\n* `commands` - A single directory, an array of directories, or a comma-delimited list of directories\n  may be provided to auto-register commands found in the provided folders that match the \".js\"\n  extension. If the module exposes the \"id\" property, that will be the name of the command,\n  otherwise the filename (minus the extension) will be used as the name of the command. If relative\n  paths are provided, they will be resolved from process.cwd().\n* `master` - An optional module to execute for the master process only, once ```start``` has been completed.\n  \n  \n\n## Console & REST API\n\nA DPS Cluster Service has two interfaces, the console (stdio), and an HTTP REST API. The two\ninterfaces are treated identical, as console input/output is piped over the REST API. The\nreason for the piping is that a DPS Cluster Service is intentionally designed to only\nsupport one instance of the given service running at any one time, and the port binding\nis the resource constraint. This allows secondary services to act as console-only\ninterfaces as they pipe all input/output over HTTP to the already running service\nthat owns the port. This flow enables the CLI to background processes.\nThe REST API is locked to a \"accessKey\" expected in the query string. The console\nautomatically passes this key to the REST API, but for external REST API access,\nthe key will need to be known.\n\n\t{ host: \"localhost\", port: 11987, accessKey: \"lksjdf982734\" }\n\nInvoking the REST interface directly would look something like:\n\n\tcurl -d \"\" \"http://localhost:11987/cli?cmd=help&accessKey=lksjdf982734\"\n\nOr better yet, use the ```run``` option to do the work for you:\n\n\tcservice \"help\" --accessKey \"lksjdf982734\"\n\t// same as\n\tcservice --run \"help\" --accessKey \"lksjdf982734\"\n\t\n\n\n## Cluster Commands\n\nWhile a Cluster Service may provide its own custom commands, below are provided out-of-the-box.\nCommands may be disabled by overriding them.\n\n* `start workerPath [cwd] { [timeout:60] }` - Gracefully start service, one worker at a time.\n* `restart all|pid { [timeout:60] }` - Gracefully restart service, waiting up to timeout before terminating workers.\n* `shutdown all|pid { [timeout:60] }` - Gracefully shutdown service, waiting up to timeout before terminating workers.\n* `exit now` - Forcefully exits the service.\n* `help [cmd]` - Get help.\n* `upgrade all|pid workerPath { [cwd] [timeout:60] }` - Gracefully upgrade service, one worker at a time. (continuous deployment support).\n* `workers` - Returns list of active worker processes.\n* `health` - Returns health of service. Can be overidden by service to expose app-specific data.\n* `info` - Returns summary of process & workers.\n\n\n\n## Commands & Events\n\nCreating custom, or overriding commands and events is as simple as:\n\n  cservice \"server.js\" --commands \"./commands,../some_more_commands\"\n\nOr if you prefer to manually do so via code:\n\n\tvar cservice = require(\"cluster-service\");\n\tcservice.on(\"custom\", function(evt, cb, arg1, arg2) { // \"custom\" command\n\t\t// can also fire custom events\n\t\tcservice.trigger(\"on.custom.complete\", 1, 2, 3);\n\t};\n\t\n\tcservice.on(\"test\", function(evt, cb, testScript, timeout) { // we're overriding the \"test\" command\n\t\t// arguments\n\t\t// do something, no callback required (events may optionally be triggered)\n\t}; \n\t\n\t// can also issue commands programatically\n\tcservice.trigger(\"custom\", function(err) { /* my callback */ }, \"arg1value\", \"arg2value\");\n\n\n## Cluster Events\n\nEvents are emitted to interested parties.\n\n* `workerStart (pid, reason)` - Upon exit of any worker process, the process id of the exited worker. Reasons include: \"start\", \"restart\", \"failure\", and \"upgrade\".\n* `workerExit (pid, reason)` - Upon start of any worker process. Reasons include: \"start\", \"restart\", \"failure\", and \"upgrade\".\n\n\n\n## Async Support\n\nWhile web servers are automatically wired up and do not require async logic (as of v1.0), if\nyour service requires any other asynchronous initialization code before being ready, this\nis how it can be done.\n\nHave the worker inform the master once it is actually ready:\n\n\t// worker.js\n\trequire(\"cluster-service\").workerReady(false); // we're NOT ready!\n\tsetTimeout(funtion() {\n\t\t// dumb example of async support\n\t\trequire(\"cluster-service\").workerReady(); // we're ready!\n\t}, 1000);\n\nAdditionally, a worker may optionally perform cleanup tasks prior to exit, via:\n\n\t// worker.js\n\trequire(\"cluster-service\").workerReady({\n\t\tonWorkerStop: function() {\n\t\t\t// lets clean this place up\n\t\t\tprocess.exit(); // we're responsible for exiting if we register this cb\n\t\t}\n\t});\n\t\n\t\n\n## Access Control\n\nCommands may be granted \"inproc\" (high risk), \"local\" (low risk), or \"remote\" (no risk). Setting\naccess control can be done within the command, like so:\n\n```javascript\n// exit.js\nmodule.exports.control = function(){\n\treturn \"local\";\n};\n```\n\nOr may be overriden at runtime via:\n\n```javascript\n// server.js\nrequire(\"cluster-service\").control({ \"exit\": \"local\" });\n```\n\n\t\n  \n## Tests & Code Coverage\n\nDownload and install:\n\n\tgit clone https://github.com/godaddy/node-cluster-service.git\n\tcd node-cluster-service\n\tnpm install\n\nNow test:\t\n\n\tnpm test\n\nView code coverage in any browser:\n\n\tcoverage/lcov-report/index.html\n\n\t\n## Change Log\n\n[Change Log](https://github.com/godaddy/node-cluster-service/blob/master/CHANGELOG.md)\n\n\t\n\n## License\n\n[MIT](https://github.com/godaddy/node-cluster-service/blob/master/LICENSE.txt)\n",
  "readmeFilename": "README.md",
  "_id": "cluster-service@1.0.5",
  "dist": {
    "shasum": "c1fdc80b9ebf303dd75a884c48b8d93e33b8c1ca"
  },
  "_from": "cluster-service@>=0.5.0",
  "_resolved": "https://registry.npmjs.org/cluster-service/-/cluster-service-1.0.5.tgz"
}
